
#[derive(Deserialize, Debug)]
pub struct RawEvent {
  #[serde(rename = "type")]
  pub type_: String,
}

pub enum Event {
  CallAnswer(RawEvent),
  CallCandidates(RawEvent),
  CallHangup(RawEvent),
  CallInvite(RawEvent),
  Direct(RawEvent),
  ForwardedRoomKey(RawEvent),
  FullyRead(RawEvent),
  IgnoredUserList(RawEvent),
  Presence(RawEvent),
  Receipt(RawEvent),
  RoomAliases(RawEvent),
  RoomAvatar(RawEvent),
  RoomCanonicalAlias(RawEvent),
  RoomCreate(RawEvent),
  RoomEncrypted(RawEvent),
  RoomEncryption(RawEvent),
  RoomGuestAccess(RawEvent),
  RoomHistoryAvailability(RawEvent),
  RoomJoinRules(RawEvent),
  RoomMember(RawEvent),
  RoomMessage(RawEvent),
  RoomMessageAudio(RawEvent),
  RoomMessageEmote(RawEvent),
  RoomMessageFile(RawEvent),
  RoomMessageImage(RawEvent),
  RoomMessageLocation(RawEvent),
  RoomMessageNotice(RawEvent),
  RoomMessageText(RawEvent),
  RoomMessageVideo(RawEvent),
  RoomMessageFeedback(RawEvent),
  RoomName(RawEvent),
  PinnedEvents(RawEvent),
  RoomPowerLevels(RawEvent),
  RoomRedaction(RawEvent),
  RoomServerAcl(RawEvent),
  RoomThirdPartyInvite(RawEvent),
  RoomTopic(RawEvent),
  RoomKey(RawEvent),
  RoomKeyRequest(RawEvent),
  Sticker(RawEvent),
  Tag(RawEvent),
  Typing(RawEvent),
  NotHandled,
}

pub fn parse_event_type (event: RawEvent) -> Event {
  match event.type_.as_str() {
    "m.call.answer" => Event::CallAnswer(event),
    "m.call.candidates" => Event::CallCandidates(event),
    "m.call.hangup" => Event::CallHangup(event),
    "m.call.invite" => Event::CallInvite(event),
    "m.direct" => Event::Direct(event),
    "m.forwarded_room_key" => Event::ForwardedRoomKey(event),
    "m.fully_read" => Event::FullyRead(event),
    "m.ignored_user_list" => Event::IgnoredUserList(event),
    "m.presence" => Event::Presence(event),
    "m.receipt" => Event::Receipt(event),
    "m.room.aliases" => Event::RoomAliases(event),
    "m.room.avatar" => Event::RoomAvatar(event),
    "m.room.canonical_alias" => Event::RoomCanonicalAlias(event),
    "m.room.create" => Event::RoomCreate(event),
    "m.room.encrypted" => Event::RoomEncrypted(event),
    "m.room.encryption" => Event::RoomEncryption(event),
    "m.room.guest_access" => Event::RoomGuestAccess(event),
    "m.room.history_visibility" => Event::RoomHistoryAvailability(event),
    "m.room.join_rules" => Event::RoomJoinRules(event),
    "m.room.member" => Event::RoomMember(event),
    "m.room.message" => Event::RoomMessage(event),
    "m.room.message#m.audio" => Event::RoomMessageAudio(event),
    "m.room.message#m.emote" => Event::RoomMessageEmote(event),
    "m.room.message#m.file" => Event::RoomMessageFile(event),
    "m.room.message#m.image" => Event::RoomMessageImage(event),
    "m.room.message#m.location" => Event::RoomMessageLocation(event),
    "m.room.message#m.notice" => Event::RoomMessageNotice(event),
    "m.room.message#m.text" => Event::RoomMessageText(event),
    "m.room.message#m.video" => Event::RoomMessageVideo(event),
    "m.room.message.feedback" => Event::RoomMessageFeedback(event),
    "m.room.name" => Event::RoomName(event),
    "m.room.pinned_events" => Event::PinnedEvents(event),
    "m.room.power_levels" => Event::RoomPowerLevels(event),
    "m.room.redaction" => Event::RoomRedaction(event),
    "m.room.server_acl" => Event::RoomServerAcl(event),
    "m.room.third_party_invite" => Event::RoomThirdPartyInvite(event),
    "m.room.topic" => Event::RoomTopic(event),
    "m.room_key" => Event::RoomKey(event),
    "m.room_key_request" => Event::RoomKeyRequest(event),
    "m.sticker" => Event::Sticker(event),
    "m.tag" => Event::Tag(event),
    "m.typing" => Event::Typing(event),
    _ => Event::NotHandled
  }
}

